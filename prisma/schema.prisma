// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id     String @id @default(uuid())
  userId String

  title       String
  description String?  @db.Text
  image_url   String?  @db.Text
  price       Decimal?
  isPublished Boolean  @default(false)

  categoryId String?
  Category   Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Attachment Attachment[]
  Chapter    Chapter[]

  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
  Purchases  Purchases[]
  students   StudetsOnCourses[]

  @@index([categoryId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  isFree      Boolean? @default(false)
  isPublished Boolean? @default(false)
  video_url   String?  @db.Text
  position    Int?

  muxData MuxData? // для Mux

  courseId String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  UserProgress UserProgress[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  chapterId  String  @unique
  Chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  assetId    String
  playbackId String?

  @@index([chapterId])
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  Chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Category {
  id    String @id @default(uuid())
  title String @unique

  Course Course[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Attachment {
  id    String @id @default(uuid())
  title String
  url   String @db.Text

  courseId String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade) // once course has been deleted, all the attachments will be deleted too (Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([courseId])
}

model Purchases {
  id     String @id @default(uuid())
  userId String

  courseId String
  Course   Course @relation(fields: [courseId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Coupon {
  id      String  @id @default(uuid())
  userId  String  @unique
  coupon  String
  isValid Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Student {
  id        String             @id @default(uuid())
  name      String
  image_url String
  courses   StudetsOnCourses[]
}

model StudetsOnCourses {
  id        String  @id @default(uuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([courseId, studentId])
}
